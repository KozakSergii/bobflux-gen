import * as g from '../src/funCursorsGenerator';
import * as gb from '../src/generator';
import * as tsa from '../src/tsAnalyzer';
import * as log from '../src/logger';
import * as ts from 'typescript';
import * as fs from "fs";
import * as pathPlatformDependent from 'path';
const path = pathPlatformDependent.posix;

describe('funCursorsGenerator', () => {
    let testCase: { do: () => Promise<string> };
    let logger = log.create(false, false, false, false);

    describe('auto-generated header', () => {
        beforeEach(() => {
            testCase = {
                do: () => new Promise<string>((f, r) => {
                    g.default(aProject('IApplicationState', './stateTodos.ts', (filename: string, b: Buffer) => {
                        if (filename.indexOf('stateTodos') !== -1)
                            f(b.toString('utf8'));
                    }, '0.5.3'), tsa.create(logger), logger).run();
                })
            };
        });

        it('adds note', (done) => {
            testCase
                .do()
                .then(text => {
                    expect(text).toContain(`// 
// This source code was auto-generated by bobflux-gen, Version=0.5.3.
// Don't modify this file but re-generate it by bobflux-gen.
// Bobflux-gen - https://www.npmjs.com/package/bobflux-gen
//`);
                    done();
                });
        });
    });

    describe('todos', () => {
        beforeEach(() => {
            testCase = {
                do: () => new Promise<string>((f, r) => {
                    g.default(aProject('IApplicationState', './stateTodos.ts', (filename: string, b: Buffer) => {
                        if (filename.indexOf('stateTodos') !== -1)
                            f(b.toString('utf8'));
                    }, '0.5.3'), tsa.create(logger), logger).run();
                })
            };
        });

        it('generates imports', (done) => {
            testCase
                .do()
                .then(text => {
                    expect(text).toContain(`import * as s from './stateTodos';
import * as f from './flux';
`);
                    done();
                })
                .catch(e => { expect(e).toBeUndefined(); done(); });
        });

        it('generates cursor for array', (done) => {
            testCase
                .do()
                .then(text => {
                    expect(text).toContain(`
export function todoSectionTodoSectionTodos(cursor: f.ICursor<s.IApplicationState>): f.ICursor<s.ITodo[]> {
    return { key: cursor.key + '.todoSection.todos' };
}
`);
                    done();
                })
                .catch(e => { expect(e).toBeUndefined(); done(); });
        });

        it('generates cursor for item in array', (done) => {
            testCase
                .do()
                .then(text => {
                    expect(text).toContain(`
export function todoSectionTodoSectionTodos(cursor: f.ICursor<s.IApplicationState>, index: number): f.ICursor<s.ITodo[]> {
    return { key: cursor.key + '.todoSection.todos' + index };
}
`);
                    done();
                })
                .catch(e => { expect(e).toBeUndefined(); done(); });
        });
    });

    describe('createCursorFilePath', () => {
        it('creates file path for cursors from state file path', () => {
            expect(g.createCursorsFilePath('c:/app/state.ts'))
                .toBe('c:/app/state.f.cursors.ts');
        });
    });

    function aProject(appStateName: string, appFilePath: string, writeFileCallback: (filename: string, b: Buffer) => void, version: string = 'AVersion'): gb.IGenerationProject {
        return {
            version: version,
            dir: __dirname,
            appStateName: appStateName,
            appSourcesDirectory: path.join(__dirname, 'resources'),
            appStateFileName: path.basename(appFilePath),
            tsOptions: { module: ts.ModuleKind.CommonJS, target: ts.ScriptTarget.ES5, skipDefaultLibCheck: true },
            writeFileCallback: writeFileCallback
        }
    }

    // logger = {
    //     info: (message: string, params?: any) => { },
    //     warning: (message: string, params?: any) => { },
    //     error: (message: string, params?: any) => { },
    //     debug: (message: string, params?: any) => { (message.indexOf('Visited kind') === 0 || message.indexOf('Source result') === 0) && console.log(`Debug: ${message}`, params); }
    // }

});